js 基础


基础js https://wangdoc.com/javascript/


========================================
js运行方式、注释
----------------------------------------
1.js写到script标签内，并保存为xx.html文件
<h1>xx咖啡店</h1>
<script>
alert('你的电脑奔溃了！')
</script>

双击即可运行。

输出语句只有2个:
弹出框: alert('xx='+xx)
控制台输出: console.log("xx=",xx)



2. js写到yy.js文件中，在xx.html中引用：
<script src="/templets/new/script/jquery1.12.4.min.js"></script>


3. chrome浏览器，按下F12，选择console标签，即可输入js语句并回车运行。



4.注释，两种
// 单行注释


/*
多行注释1
多行注释2
...
*/



========================================
控制结构、变量、运算符
----------------------------------------
1.控制结构
语句结束不需要用分号;，可加可以不加
(1)
var item="pen";
if(item=="pen"){
	price=20
}

(2)
var age=13
if(age<18){
	str="不能进"
}else{
	str="可以进"
}

(3)
var num=30
if(num==1){
	str='单挑'
}else if(num==2){
	str='一对2'
}else{
	str="群殴"
}


(4)for循环，计算1+2+3+...+10
var sum=0
for(var i=0;i<=10;i++){
	sum+=i;
	console.log(i,sum)
}

(5)while(){}循环，计算1+2+3+...+10
var i=10,sum=0
while(i>0){
	sum+=i;
	console.log(i,sum)
	i--
}

(6)do...while()循环，计算1+2+3+...+10
var i=10,sum=0
do{
	sum+=i;
	console.log(i,sum)
	i--
}while(i>0)

注意：do...while()至少会执行一次循环体。






2.变量 
使用var 变量名 声明变量


var j=0 #可以赋初始值
var i #也可以不赋初始值

#可以一行声明多个变量，用逗号隔开
var num=2,book="" 




3.表达式/运算符
+
-
*
/
% 取余数 23%7 #2
** 求幂 10**3 #1000
Math.sqrt(x) 求x的开平方

+= #自加  i+=2 就是i=i+2
-=
*=
/=



布尔运算符
&& 和 
|| 或 
! 非






========================================
数组 Array
----------------------------------------
1. 定义数组
1)
arr2=Array(1,2,3)

2)
arr3=[0,10,20,30,40,50]



2. 获取数组元素
arr2[0] #1


3. 切片：获取子数组
比如，只要arr3的后两个元素构成的数字
arr3.slice(2,4) #[20,30] 左闭右开区间


4. 覆盖第一个元素的值 / 重新定义值
arr3[0]=-1
arr3 #[-1, 10, 20, 30, 40, 50]


5. 获取数组长度
arr3.length  #6


6. 遍历获取每个元素
for(var i in arr3){
	console.log(i, arr3[i])
}
## 0 -1
## 1 10
## 2 20
## 3 30
## 4 40
## 5 50


7. 为数组添加元素
1)在末尾添加元素
arr3.push(-30) #7 返回新数组长度
arr3 # (7) [-1, 10, 20, 30, 40, 50, -30]


2)在开头添加元素
arr3.unshift(300) #8 
arr3 #(8) [300, -1, 10, 20, 30, 40, 50, -30]

3) 在指定位置添加元素
Array.splice(start,deleteNumber,addItem)

例：在第2个位置(10)开始删除1个元素(10)，添加2个元素0,1
arr3.splice(2,1,0,1) #[10] 返回被删除的元素
arr3 #(9) [300, -1, 0, 1, 20, 30, 40, 50, -30]




8. 从头尾获取数组元素
1)从头部获取元素
arr3.shift() #300 返回第一个元素，同时数组少了该元素
arr3 #(8) [-1, 0, 1, 20, 30, 40, 50, -30]

2)从尾部获取元素
arr3.pop() #-30 返回最后一个元素，同时数组少了该元素
arr3 #(7) [-1, 0, 1, 20, 30, 40, 50]



9.对数组排序
默认是按照ascii码升序排列，直接改变原始数组顺序 Array.sort()

支持自定义排序函数，倒序：
arr3.sort(function(a,b){return b-a;})
## (7) [50, 40, 30, 20, 1, 0, -1]
arr3 #(7) [50, 40, 30, 20, 1, 0, -1]




10. 数组是按地址传递的
常规按值传递：
a=1
b=a
b=b+2
a=?  #1


对于数组
a1=[1,2,3]
b1=a1
b1.push(100)
a1=?
## a1 #(4) [1, 2, 3, 100]

为什么呢？
因为数组是按地址传递的。
也就是数组变量保存的是内存的地址，取值时到内存中的地址指向的区域取值的。




11. 二维数组




========================================
对象 Object
----------------------------------------

object 对象:就是一系列的键值对(key value pairs)

<script>
//1.定义，对象 又叫字典(dictionary)，又叫哈希表(hash table)
//(1)键值对内部用冒号，键值对之间用逗号，
//(2)键不能重复，否则后一个会覆盖之前的同名键值对；
//(3)键需要加引号，值如果是字符串则需要加引号，是数字不需要加
var obj1={'name':'王某某', 'sex':'男', 'height':180}

//2.获取
console.log('姓名:', obj1.name)
console.log('身高:', obj1.height)


//3.修改
obj1.name='李某'
obj1.height*=2
console.log('(修改后)姓名:', obj1.name)
console.log('(修改后)身高:', obj1.height)

//或
obj1['name']='李某2'

//4.增加新键
obj1.weight=67
obj1['weight']=67.5 //或
console.log('体重:', obj1.weight)

//5.删除一个键
//del obj1.sex
delete(obj1.sex)
console.log('==>after delete sex:', obj1)

//6.遍历
for(var key in obj1){
	var val=obj1[key]
	console.log('-->>',key, ':', val)
}
</script>




========================================
DOM: 文档对象模型 document object model
----------------------------------------
1.要点:dom的选取、修改、创建



2.实例：a01.html
<h1>dom操作</h1>


<h2>点餐表</h2>
<div id=app1>xxx1</div>
<div id=app2>xxx2</div>
<div id=app3>xxx3</div>

<script>
//1.获取dom元素
var oDiv1=document.getElementById('app1')
//输出旧的值
console.log('01-->>>>>>>',oDiv1.innerHTML)


//2修改dom
//修改该元素内的文本
oDiv1.innerHTML="咖啡"
oDiv1.innerHTML="绿茶"
//修改该元素的css属性
oDiv1.style.color="red";
oDiv1.style.fontSize="2em";
oDiv1.style.border="1px dashed #555";

if(oDiv1.innerHTML=="绿茶"){
	oDiv1.style.color="green";
}
console.log('02-->>>>>>>',oDiv1.innerHTML)


//3创建dom元素
var newDiv=document.createElement("div");
newDiv.innerHTML="肉包子"
newDiv.style.color='purple'
//插入文档流
document.body.append(newDiv)
</script>





3.实例2：输出计算结果
<div id='app2'></div>

<script>
//一个复杂的计算
var a=1,b=299,c
c=a+b


//三种输出方式
//1.输出到控制台
console.log('控制台:',c)

//2.输出到弹窗
alert('弹窗c='+c)

//3.输出到文档流
document.getElementById('app2').innerHTML="输出到文档流:c="+c
</script>





========================================
事件 Event
----------------------------------------
使用场景：某件事情(单击、键盘输入等)发生后，执行某个操作(提交表单、文本框变颜色等)或某些操作(写到事件函数中的语句块)。

事件包括事件函数，添加事件，事件代理，自定义事件和事件的触发。


1.鼠标事件
<button id=btn1>按钮1</button>

<script>

var oBtn=document.getElementById('btn1')
oBtn.onclick=function(event){
	console.log(event)
	alert('你点我了')
}
</script>




2.键盘事件
键盘事件
<hr>

<input type=input id=text1>



<script>

var oInput=document.getElementById('text1')
oInput.onkeyup=function(event){
	console.log('key=',event.key, '; keyCode=', event.keyCode)
}
</script>



3.事件冒泡，
事件冒泡(从子元素向上一直到？)，及其阻止
父子元素都有单击事件，子元素被单击，谁先响应？

<hr>
<style>
#f1{width:1000px; height:300px; background:#eee;}
#c1{width:500px; height:100px; background:#e00;}
</style>

<div id=f1>
	oF
	<div id=c1>oC	</div>
</div>

<script>
var oD=document.body;
var oF=document.getElementById('f1')
var oC=document.getElementById('c1')
oD.onclick=function(event){
	alert('oDocument.body')
}
oF.onclick=function(event){
	alert('oF')
}
oC.onclick=function(event){
	//阻止事件冒泡
	event.stopPropagation()
	alert('oChild')
}
</script>




4.阻止默认事件
比如右击会出现菜单，我们想生成自己的右键菜单，就需要阻止系统的右键菜单。

阻止默认事件
<hr>

<script>
document.oncontextmenu=function(e){
	e.preventDefault();
	alert('右击不会出现默认菜单了')
}
</script>

如何自定义右键菜单？
https://www.cnblogs.com/zwn-lucky7/p/6926218.html




5.手动触发事件
比如，我们想通过浏览器的F12控制台，触发单击事件。

IE下使用 fireEvent
高级浏览器下使用 dispatchEvent


手动触发事件
<hr>
<div id='obj1' style='height:300px; background:#eee;'>obj1</div>

<script>
var oDiv1=document.getElementById('obj1');
oDiv1.onclick=function(){
	console.log('clicked:',this, event)
}

//通过代码触发一个单击事件
function trigger(obj,eventName){ //如click,change，不要on
    // 手动触发事件
    if (obj.fireEvent){
        obj.fireEvent('on'+eventName);
    }else{
        ev = document.createEvent("HTMLEvents");  
        ev.initEvent(eventName, false, true);  
        obj.dispatchEvent(ev);  
    }
}
trigger(oDiv1,'click') //输入到F12控制台，也会触发单击事件
</script>




实例2：使用原生js手动触发事件
<!DOCTYPE html>
<html>
<head>
    <title>111</title>
</head>
<body>
    <select id='bbb' title="1111">
        <option value="empty">请选择</option>
        <option value="b2">b2</option>
        <option value="b3">b3</option>
    </select>
</body>
<script type="text/javascript">
    // 添加事件
    var bbb = document.getElementById('bbb');
    if(bbb.addEventListener){
        bbb.addEventListener('change', function(){
            console.log('aaaaaa|'+this.value);
        });
    }
    else{
        bbb.attachEvent('onchange', function(){
            console.log('aaaaaa|'+this.value);
        });
    }

    // 设置select默认值
    bbb.value = 'b3';

var i=1 //修改这个数字，看效果
if(i>1){
	
    // 手动触发事件
    if (bbb.fireEvent){
        bbb.fireEvent('onchange');
    }
    else{
        ev = document.createEvent("HTMLEvents");  
        ev.initEvent("change", false, true);  
        bbb.dispatchEvent(ev);  
    }

    // jquery触发
    // bbb.trigger('change');
}
</script>
</html>





6.添加事件，防止互相覆盖
添加事件
<hr>
<div id='obj1' style='height:300px; background:#eee;'>obj1</div>

<script>
var oDiv1=document.getElementById('obj1');
oDiv1.onclick=function(){
	console.log('clicked:01')
}
oDiv1.onclick=function(){
	console.log('clicked:02')
}
//如上一个对象上添加多个事件，只有最后一个起作用了。

//添加事件/ 绑定事件
function addEvent(obj, eventName, fn){ //不加on的click
    if(obj.addEventListener){
        obj.addEventListener(eventName, fn);
    }else{
        obj.attachEvent('on'+eventName, fn);
    }
}
//这样避免被覆盖
addEvent(oDiv1,'click',function(){
	console.log('clicked: addEvent 03')
})
addEvent(oDiv1,'click',function(){
	console.log('clicked: addEvent 04')
})
</script>
















========================================
|-- 7.自定义事件
----------------------------------------
所谓自定义事件，就是有别于有别于带有浏览器特定行为的事件(类似click, mouseover, submit, keydown等事件)，事件名称可以随意定义，可以通过特定的方法进行添加，触发以及删除。



1.
自定义事件有两种方法,一种是使用new Event(),另一种是new customEvent()

(1)
var myEvent = new Event('event_name');

但是为了能够传递数据，就需要使用 CustomEvent 构造器：

var myEvent = new CustomEvent('event_name', {
    detail:{
        // 将需要传递的数据写在detail中，以便在EventListener中获取
        // 数据将会在event.detail中得到
    },
});


(2)JS的EventListener是根据事件的名称来进行监听的，比如我们在上文中已经创建了一个名称为‘event_name’ 的事件，那么当某个元素需要监听它的时候，就需要创建相应的监听器：

//假设listener注册在window对象上
window.addEventListener('event_name', function(event){
    // 如果是CustomEvent，传入的数据在event.detail中
    console.log('得到数据为：', event.detail);

    // ...后续相关操作
});

至此，window对象上就有了对‘event_name’ 这个事件的监听器，当window上触发这个事件的时候，相关的callback就会执行。


(3)事件的触发

对于一些内置（built-in）的事件，通常都是有一些操作去做触发，比如鼠标单击对应MouseEvent的click事件，利用鼠标（ctrl+滚轮上下）去放大缩小页面对应WheelEvent的resize事件。
然而，自定义的事件由于不是JS内置的事件，所以我们需要在JS代码中去显式地触发它。方法是使用 dispatchEvent 去触发（IE8低版本兼容，使用fireEvent）：


// 首先需要提前定义好事件，并且注册相关的EventListener
var myEvent = new CustomEvent('event_name', { 
    detail: { title: 'This is title!'},
});
window.addEventListener('event_name', function(event){
    console.log('得到标题为：', event.detail.title);
});

// 随后在对应的元素上触发该事件
if(window.dispatchEvent) {  
    window.dispatchEvent(myEvent);
} else {
    window.fireEvent(myEvent);
}
// 根据listener中的callback函数定义，应当会在console中输出 "得到标题为： This is title!"


需要特别注意的是，当一个事件触发的时候，如果相应的element及其上级元素没有对应的EventListener，就不会有任何回调操作。
对于子元素的监听，可以对父元素添加事件托管，让事件在事件冒泡阶段被监听器捕获并执行。这时候，使用event.target就可以获取到具体触发事件的元素。






2.代码示例
自定义事件，并触发
<hr>
<pre>
event.target 触发事件的对象；
自定义事件默认不会冒泡，除非指定。

</pre>
<div id='obj1' style='height:100px; background:#eee;'>obj1</div>

<script>
//原生事件
var oDiv1=document.getElementById('obj1');
oDiv1.onclick=function(){
	console.log('clicked(oDiv1):',event.target)
	//console.log('clicked(oDiv1):',this, event,event.target)
	console.log('bubbles=',event.bubbles, '; cancelable=',event.cancelable);
}
window.onclick=function(){
	console.log('clicked(window):',this, event,event.target)
}

//通过代码触发一个单击事件
function trigger(obj,eventName){ //如click,change，不要on
    // 手动触发事件
    if (obj.fireEvent){
        obj.fireEvent('on'+eventName);
    }else{
        ev = document.createEvent("HTMLEvents");  
        ev.initEvent(eventName, false, true);  
        obj.dispatchEvent(ev);  
    }
}
trigger(oDiv1,'click') //输入到F12控制台，也会触发单击事件
//也不会冒泡



//============1. 不能传参数
// 不自定义事件，直接注册事件到对象上，但是拿不到参数了
window.addEventListener('event_name00', function(event){
    // 如果是CustomEvent，传入的数据在event.detail中
    console.log('001==>得到数据为：', event.detail);
    // ...后续相关操作
    console.log('event_name00 事件发生了(window)');
});
oDiv1.addEventListener('event_name00', function(event){
    // 如果是CustomEvent，传入的数据在event.detail中
    console.log('001==>得到数据为：', event.detail);
    // ...后续相关操作
    console.log('event_name00 事件发生了(oDiv1)');
	console.log('bubbles=',event.bubbles, '; cancelable=',event.cancelable);
});
trigger(oDiv1,'event_name00') //触发自定义事件，不会冒泡到window？
//trigger(window,'event_name00') 




//============2. 能传参数
//自定义事件
//01 首先需要提前定义好事件，并且注册相关的EventListener
var myEvent = new CustomEvent('event_name01', { 
    detail: { title: 'This is title!'},
});

//02 注册事件到oDiv1对象上
window.addEventListener('event_name01', function(event){
    // 如果是CustomEvent，传入的数据在event.detail中
    console.log('002==>得到数据为：', event.detail);
    // ...后续相关操作
    console.log('event_name01 事件发生了(window)');
});
oDiv1.addEventListener('event_name01', function(event){
    // 如果是CustomEvent，传入的数据在event.detail中
    console.log('002==>得到数据为：', event.detail);
    // ...后续相关操作
    console.log('event_name01 事件发生了(oDiv1)');
	console.log('bubbles=',event.bubbles, '; cancelable=',event.cancelable);
});
//03 触发事件
// 随后在对应的元素上触发该事件
if(window.dispatchEvent) {  
    oDiv1.dispatchEvent(myEvent);
} else {
    oDiv1.fireEvent(myEvent); //IE8低版本兼容，使用fireEvent
}
// 根据listener中的callback函数定义，应当会在console中输出 "得到标题为： This is title!"



//============3. 如何实现冒泡？
//var btn = document.querySelector('.button');
//var ev = new Event('testEvent', {
var ev = new CustomEvent('testEvent', {
	bubbles: 'true',
	cancelable: 'true',
	detail: 'msg from detail', //只有CustomEvent能传递出去，Event传递不出去
	'price':200, //总是传不过去
});
oDiv1.addEventListener('testEvent', function (event) {
	console.log('003==>testEvent(oDiv1)');
	console.log('bubbles=',event.bubbles, '; cancelable=',event.cancelable);
	console.log('price=',event.price);
	console.log('detail=',event.detail);
	console.log('target=',event.target);
	//阻止冒泡
	//event.stopPropagation()
}, false);
window.addEventListener('testEvent', function (event) {
	console.log('003==>testEvent(window)');
	console.log('price=',event.price);
	console.log('detail=',event.detail);
	console.log('target=',event.target);
}, false);
oDiv1.dispatchEvent(ev);

</script>





3.自定义事件的使用场景：

(1)例子一：通知多个对象
要实现 元素A点击之后，元素B显示鼠标的位置，元素C显示提示，可以这样写：

自定义事件，并触发: 通知多个对象
<hr>
我们可以在一个公共对象上监听和触发事件
<pre>
event.target 触发事件的对象；
自定义事件默认不会冒泡，除非指定。

</pre>
<div id='a' style='height:50px; background:#eee;'>a</div>

<ul>
	<li id=b></li>
	<li id=c></li>
</ul>

<script>
var a = document.getElementById("a");
a.addEventListener("click",function(e){
    var clickA = new Event("clickA");
    document.dispatchEvent(clickA);
});

var b = document.getElementById("b");
document.addEventListener("clickA",function(e){
    b.innerHTML = "(128,345) "+new Date().getTime();
})

var c = document.getElementById("c");
document.addEventListener("clickA",function(e){
    c.innerHTML = "你点了A "+new Date().getTime();
})

</script>

三个模块之间完全不用关心对象，也不知道对方存在，耦合度非常的低，完全可以独立编写，不会互相影响。这其实就是一个观察者模式的实现。



(2)例子二：游戏框架
要开发一个游戏，启动游戏，加载图片和音乐，加载完后，渲染场景和音效，加载和渲染由不同的人负责。

var start = document.getElementById("start");
start.addEventListener("click",function(e){
    console.log("游戏开始！");
    document.dispatchEvent(new Event("gameStart"));
})


// 加载图片
document.addEventListener("gameStart",function(){
    console.log("加载图片...");
    setTimeout(function(){
        console.log("加载图片完成");
        document.dispatchEvent(new Event("loadImageSuccess"));
    },1000);
});

/加载音乐
document.addEventListener("gameStart",function(){
    console.log("加载音乐...");
    setTimeout(function(){
        console.log("加载音乐完成");
        document.dispatchEvent(new Event("loadMusicSuccess"));
    },2000);
});


//渲染场景
document.addEventListener("loadImageSuccess",function(e){
    console.log("使用图片创建场景...");
    setTimeout(function(){
        console.log("创建场景完成");
    },2000)
});

//渲染音效
document.addEventListener("loadMusicSuccess",function(e){
    console.log("使用音乐创建音效...");
    setTimeout(function(){
        console.log("创建音效完成");
    },500)
});

加载模块和渲染模块互不影响，易于扩展。



(3)携带信息
除此之外，事件还能传递自定义信息：
//事件还能传递自定义信息
var event2 = new CustomEvent('myEvent', {
	'detail':{'price':10.3}, 
	'dataName': "dataContent002" 
});
setTimeout(function(){
	document.dispatchEvent(event2);//直接放到正文不执行，why?
},1000)

注意：传递自定义信息需要使用CustomEvent，而不是Event；
只有detail键的value能被传递！

//然后在监听函数里取出：
document.addEventListener("myEvent",function(e){
    console.log('e.dataName=',e.dataName);//undefined
    console.log('e.detail=',e.detail);
})

这个功能非常有用！



(4)使用自定义事件的优缺点
优点： 各模块之间低耦合
缺点：不好定位问题，容易导致诡秘的错误。

https://blog.csdn.net/ruangong1203/article/details/52474452






========================================
|-- JavaScript事件(createEvent,initEvent,dispatchEvent)
----------------------------------------
dispatchEvent()方法用于触发自定义事件，
自定义事件使用createEvent()创建事件对象，
使用initEvent()初始化事件对象。



1.

void initEvent(String eventTypeArg, boolean canBubbleArg, boolean cancelableArg)

下表列出了 eventType 的合法值和每个值创建的事件接口：

参数	事件接口	初始化方法
HTMLEvents	HTMLEvent	initEvent()
MouseEvents	MouseEvent	initMouseEvent()
UIEvents	UIEvent	initUIEvent()




2.示例
自定义事件和触发
<script>
/* 创建一个事件对象，名字为newEvent，类型为HTMLEvent */
var newEvent = document.createEvent("HTMLEvents");

/* 
 * 实例化创建好的事件对象
 * 第一个参数：事件类型（就好像是click还是submit）
 * 第二个参数：是否冒泡
 * 第三个参数：是否阻止浏览器默认行为（例如阻止submit事件提交表单）
 */
newEvent.initEvent("myEvent",true,true);
    
/* 给自定义事件对象的属性赋值。这个属性一开始不存在，我们这里将其实例化了 */
newEvent.name = "THis is Name";
    
/* 
 * 将自定义事件绑定在document上，你也可以绑定到指定元素上。
 * 这里要注意：第一个参数要和上面initEvent()的第一个参数一致，否则无法触发这个事件以及获取newEvent中的一些属性（比如这里的newEvent.name）。
 */
document.addEventListener("myEvent",function() {
    //alert("自定义事件的name属性：" + newEvent.name);
    console.log("自定义事件的name属性：" + newEvent.name);
},false);

/* 触发自定义事件 */
document.dispatchEvent(newEvent);

</script>






ref:
https://blog.csdn.net/weixin_30294709/article/details/95309029
https://blog.csdn.net/weixin_34419321/article/details/91714552


========================================
|-- 自定义事件的监听: 观察者模式
----------------------------------------
当多个事件以及对应数据处理函数添加后，我们最终会得到一个类似下面数据结构的对象：

_listener = {
    "click": [func1, func2],
    "custom": [func3],
    "defined": [func4, func5, func6]
}
因此，如果我们脱离DOM, 纯碎在数据层面自定义事件的话，我们只要以构建、遍历和删除_listener对象为目的即可。




1.函数式实现
还是那句话，循序渐进，我们先看看函数式的实现（只展示骨干代码）：

var _listener = {};
var addEvent = function(type, fn) {
    // 添加
};
var fireEvent = function(type) {
    // 触发
};
var removeEvent = function(type, fn) {
    // 删除
};

上面的代码虽然显得比较初级，但是目的亦可实现。例如：
addEvent("alert", function() {
    alert("弹出！");
});

// 触发自定义alert事件
fireEvent("alert");
但是，函数式写法缺点显而易见，过多暴露在外的全局变量（全局变量是魔鬼），方法无级联等。这也是上面懒得显示完整代码的原因，略知即可。




2.字面量实现
众所周知，减少全局变量的方法之一就是使用全局变量（其他如闭包）。于是，我们稍作调整

var Event = {
    _listeners: {},    
    // 添加
    addEvent: function(type, fn) {
        if (typeof this._listeners[type] === "undefined") {
            this._listeners[type] = [];
        }
        if (typeof fn === "function") {
            this._listeners[type].push(fn);
        }    
        return this;
    },
    // 触发
    fireEvent: function(type) {
        var arrayEvent = this._listeners[type];
        if (arrayEvent instanceof Array) {
            for (var i=0, length=arrayEvent.length; i<length; i+=1) {
                if (typeof arrayEvent[i] === "function") {
                    arrayEvent[i]({ type: type });    
                }
            }
        }    
        return this;
    },
    // 删除
    removeEvent: function(type, fn) {
    	var arrayEvent = this._listeners[type];
        if (typeof type === "string" && arrayEvent instanceof Array) {
            if (typeof fn === "function") {
                // 清除当前type类型事件下对应fn方法
                for (var i=0, length=arrayEvent.length; i<length; i+=1){
                    if (arrayEvent[i] === fn){
                        this._listeners[type].splice(i, 1);
                        break;
                    }
                }
            } else {
                // 如果仅仅参数type, 或参数fn邪魔外道，则所有type类型事件清除
                delete this._listeners[type];
            }
        }
        return this;
    }
};





ref:
https://www.zhangxinxu.com/wordpress/2012/04/js-dom%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/

https://blog.csdn.net/qq_34134278/article/details/81505256

观察者模式: https://blog.csdn.net/csdnxcn/article/details/79692750




========================================
正则表达式 RegExp: Regular Expression
----------------------------------------
https://github.com/cucygh/learn-regex
https://www.w3cschool.cn/jsref/jsref-obj-regexp.html

1.一般用于构建比较复杂的规则。

(1)js正则表达式2种写法：
字面量写法 
var patt=/pattern/modifiers;
如 var reg1=/\s/gi

函数构建法 
var patt=new RegExp(pattern,modifiers);
如 var reg2=new RegExp('\\s','gi')


(2)修饰符:
i 表示忽略大小写的区别，默认是不忽略
g 是全局查找，默认是只找到一个就停下来
m	执行多行匹配。

方括号
方括号用于查找某个范围内的字符：
表达式	描述
[abc]	查找方括号之间的任何字符。
[^abc]	查找任何不在方括号之间的字符。
[0-9]	查找任何从 0 至 9 的数字。
[a-z]	查找任何从小写 a 到小写 z 的字符。
[A-Z]	查找任何从大写 A 到大写 Z 的字符。
[A-z]	查找任何从大写 A 到小写 z 的字符。
[adgk]	查找给定集合内的任何字符。
[^adgk]	查找给定集合外的任何字符。
(red|blue|green)	查找任何指定的选项。


元字符
元字符（Metacharacter）是拥有特殊含义的字符：
.  单个字符,除了换行和行结束符
\b 匹配单词边界
\B 不匹配单词边界
\w 单词字符,即字母数字下划线
\d 数字
\s 空格
\n 换行
\f 分页


量词
{m,}
{m,n}
* {0,} 
+ {1,}
? {0,1}
^ 开头
$ 结尾



RegExp 对象方法
方法	描述
compile	编译正则表达式。
exec	检索字符串中指定的值。返回找到的值，并确定其位置。
test	检索字符串中指定的值。返回 true 或 false。


捕获组()


贪婪与非贪婪匹配






2.匹配，查找，分隔，替换等

支持正则表达式的 String 对象的方法
方法	描述
search	检索与正则表达式相匹配的值。
match	找到一个或多个正则表达式的匹配。
replace	替换与正则表达式匹配的子串。
split	把字符串分割为字符串数组。


(1)匹配出is的位置
var str1='this is a book'

//匹配成功
str1.match('is') 
//["is", index: 2, input: "this is a book", groups: undefined]

//匹配失败
str1.match('are') //null

(2)查找book的位置
str1.search('book') //10


(3)使用is把字符分隔成数组
str1.split('is') //(3) ["th", " ", " a book"]


当然，更一般的是使用空格分隔成单词
str1.split(/\s+/) //(4) ["this", "is", "a", "book"]
这次终于碰到正则表达式了。


(4)替换book为dog
str1.replace('book','dog') //"this is a dog"
注意：正则替换不改变原始字符串的值，想要修改就要覆盖掉。


十分强大：正则替换中的函数
xxStr=xxStr.replace(/xx/, function(keyWord,index, text){
	return("||-"+keyWord+"-||")
})








3.综合实例：

(1)查找网页中的手机号码
规则是11位数字，且第一位是1
var str2='this is my phone13512345678, what is yours? Mine is 15812345678'
str2.match(/1\d{10}/g)) //(2) ["13512345678", "15812345678"]




(2)给出一篇英文文章，找到单词最多的前10个句子。高亮显示某个关键词。
难度：*****
<style>
.red{color:red; font-weight:bold;}
</style>

<script>
var text=`
Languages have been coming and going for millennia, but in recent times there has been less coming and a lot more going. When the world was still populated by hunter-gatherers, small, tightly knit groups developed their own patterns of speech independent of each other. Some linguists reckon that 10,000 years ago, when the world had just 5m-10m people, they spoke perhaps 12,000 languages between them.



Soon afterwards many of those people started settling down to become farmers, and their languages too became more settled and fewer in number. In recent centuries, colonisation, trade, industrialisation, the development of the nation-state and the spread of universal compulsory education, among other things, have helped to extirpate many languages that had previously prospered in isolation. And in the past few decades, thanks to globalisation and better communications, the rate of attrition has greatly accelerated, and dominant languages such as English, Spanish and Chinese are increasingly taking over.



At present the world has about 6,800 distinct languages (and many more dialects), according to Ethnologue, a database maintained by the Summer Institute of Linguistics in Dallas. The distribution of these languages is hugely uneven. The general rule is that temperate zones have relatively few languages, often spoken by many people, whereas hot, wet zones have lots, often spoken by small numbers. Europe has only around 200 languages; the Americas about 1,000; Africa 2,400; and Asia and the Pacific perhaps 3,200, of which Papua New Guinea alone accounts for well over 800. The median number of speakers is a mere 6,000, which means that half the world's languages are spoken by fewer people than that.
`

// begin to work
print=console.log

//1 短文切成句子
var aLine=text.split(/[\.\?\!\n]+/)
//var aLine=text.split(/[\.\?\!\n]+\s/)
//var aLine=text.split('.')
var j=0
var arr=[]
for(var i in aLine){
	//if(i>6)break;
	var line=aLine[i]
	//2.过滤
	//去掉带汉语的行
	if(line.match(/[\u4e00-\u9fa5]+/)){
		continue;
	}
	//去掉空行
	if(line.length<2){
		continue;
	}
	//去掉首尾的空白
	//line=line.replace(/[^\s+|\s+$]/,'')
	line=line.replace(/^\s+/,'').replace(/\s+$/,'')
	
	//3.句子分成单词
	var aWord=line.split(/\s+/)
	
	//4.记录句子的长度
	var len=aWord.length;
	//舍弃10单词以下的句子
	if(len<7)continue;
	
	//5.组装成数组
	arr.push([line, aWord, len])
	//print(i,line,aWord)
	j++
}
//6.排序
arr.sort(function(a,b){
	return(a[2]-b[2])
})
//7.写到控制台
for(var i=arr.length-1;i>=0;i--){
	print(arr[i][2], arr[i][0])
}
//8.写到正文
var n=0
var word='the'
 reg=new RegExp('\\b'+word+'\\b','ig');
for(var i=arr.length-1;i>=0;i--){
	if(++n>10)break;//只显示前10个句子
	
	//高亮显示某个单词 new RegExp(word,'ig')
	arr[i][0]=arr[i][0].replace(reg, function(keyword,index,text){
		print('keyword=',keyword,
			//'; capture=',capture,
			'; index=',index,
			'; text=',text)
		return "<span class=red>"+keyword+"</span>"
	})
	
	//print(arr[i][2], arr[i][0])
	var oP=document.createElement('p')
	oP.innerHTML=arr[i][2]+' | '+arr[i][0]
	document.body.append(oP)
}
</script>









========================================
ajax(使用 jQuery)
----------------------------------------
<meta charset="UTF-8">
jquery实例 ajax
<hr>
<button id=show>show</button>
<div id=word></div>

<script src="https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"></script>

<script>
$().ready(function(){
	$('#show').click(function(){
		$.get('back.php', function(res,status){
			console.log(res,status);
			$('#word').html(res);
		})
	})
})
</script>




========================================
node.js
----------------------------------------
Node.js® is a JavaScript runtime built on Chrome's V8 JavaScript engine.
1. 下载安装
https://nodejs.org/en/
10.16.3 LTS(2019.8.31)


1.从国内镜像，挑选最新的版本：
https://mirrors.tuna.tsinghua.edu.cn/nodejs-release/

https://mirrors.tuna.tsinghua.edu.cn/nodejs-release/v10.16.3/node-v10.16.3-x86.msi

版本号
$ npm --version
6.9.0




2. 淘宝的镜像 https://npm.taobao.org/dist
$ npm set registry https://registry.npm.taobao.org # 注册模块镜像
$ npm set disturl https://npm.taobao.org/dist # node-gyp 编译依赖的 node 源码镜像





3.npm下载太慢，怎么安装cnpm？
$ npm install -g cnpm --registry=https://registry.npm.taobao.org

以后就可以使用cnpm了
$ cnpm install




========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------

