Vue可以用于写前端页面，后端怎么配合？

前置知识：html/css/js


========================================
简介Vue.js
----------------------------------------

1.简介
https://cn.vuejs.org/
渐进式JavaScript 框架


<meta charset="UTF-8">

<!-- 开发环境版本，包含了有帮助的命令行警告 
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
-->
<script src="/static/js/vue.js"></script>

<div id="app">
  {{ message + name }}
</div>


<script>
var app=new Vue({
	'el':"#app",
	data:{ //直接绑定到vue对象了
		message:"hello, ",
		name:"Vue.js2"
	}
})
</script>

</script>



2.教程
https://www.runoob.com/vue2/vue-tutorial.html

Vue 进阶系列之响应式原理及实现
https://www.imooc.com/article/291853?block_id=tuijian_wz



========================================
前置知识和Vue要点
----------------------------------------
ES6, webpack, vue, vuex

指令
双向数据绑定
组件、组件的通信
路由和请求
生命周期
========================================
v-model, v-if, v-show
----------------------------------------
v-model="name" 绑定值; 
是否显示 
	v-show='age'(display:none) 
	或 v-if='sex';(直接删除dom)

<meta charset="UTF-8">

<!-- 开发环境版本，包含了有帮助的命令行警告 
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
-->
<script src="/static/js/vue.js"></script>

<div id="app">
  <div>
	<input type="text" v-model="name">
	<span>名字: {{name}}</span>
  </div>
  <div>
	<input type="text" v-model="age">
	<span v-show='age'>年龄: {{age}}</span>
  </div>
  <div>
	<input type="text" v-model="sex">
	<span v-if='sex'>性别: {{sex}}</span>
  </div>

</div>


<script>
var app=new Vue({
	el:"#app",
	data:{ //直接绑定到vue对象了
		message:"hello, ",
		name:"Vue.js2",
		age:"2",
		sex:"M",
	}
})
</script>




========================================
v-for
----------------------------------------
<meta charset="UTF-8">

<!-- 开发环境版本，包含了有帮助的命令行警告 
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
-->
<script src="/static/js/vue.js"></script>

<div id="app">
<h1>{{ name }}</h1>
	<ol>
		<li v-for="food in foodList">{{food}}</li>
	</ol>
	
	<ul>
		<li v-for="food in foodList2">{{food.name}}: ￥<del>{{food.price}}</del> ￥{{food.discount?food.price * food.discount:food.price}}</li>
	</ul>
</div>
在F12控制台，改变数据会立刻更新dom视图:<br>
app.foodList2.push({name:"猪肉", price:50, discount:0.99}) 

<script>
var app=new Vue({
	el:'#app',
	data:{
		name:'Vue v-for 杂货店',
		foodList:['葱','姜','蒜'],//str数组，信息不够丰富
		foodList2:[//obj数组，信息更多
			{
				name:"葱",
				price:10,
				discount:0.8
			},
			{
				name:"姜",
				price:30,
				discount:0.5
			},
			{
				name:"蒜",
				price:15,
				discount:0.3
			},
			{
				name:"鸡蛋",
				price:20,
				//不打折，怎么设置默认值？防止出错NaN
				//div中使用三元运算符 x?a:b;
			},
			
			
		]
	}
})
</script>




========================================
v-bind 绑定变量: 简写做 :
----------------------------------------

<meta charset="UTF-8">

<!-- 开发环境版本，包含了有帮助的命令行警告 
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
-->
<script src="/static/js/vue.js"></script>

<style>
.top_title{color:white; background:#ddd; padding:5px 10px;}
.active{color:red;}
</style>


<div id="app">
<h1 :class="a_class">{{ name }} <a v-bind:href="url">click me</a></h1>	
	<a v-bind:class="{active:isActive}" v-bind:href="url">click me</a>
	<br />
	<img v-bind:src="img">
</div>
<hr>
在F12控制台，改变数据会立刻更新dom视图:<br>
app.url="https://music.163.com" <br>
app.isActive=false;

<script>
var app=new Vue({
	el:'#app',
	data:{
		name:'v-bind',
		url:"https://baidu.com",
		a_class:"top_title",
		img:"https://www.baidu.com/img/xinshouye_9eb4bafebfa0b5e84dadbde50782d94f.gif",
		isActive:true,
	}
})
</script>


========================================
v-on 绑定事件: 简写做 @
----------------------------------------
v-on:click="fnInJS"; 简写做 @:click="fnInJS";

写多个动作v-on="{mouseenter:onEnter, mouseleave:onOut}";


v-on:submit="onSubmit;
v-on:submit.stop="onSubmit;
v-on:submit.prevent="onSubmit;
v-on:submit="onSubmit($event); 
v-on:submit.prevent="onSubmit($event)




实例：
<meta charset="UTF-8">

<!-- 开发环境版本，包含了有帮助的命令行警告 
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
-->
<script src="/static/js/vue.js"></script>

<style>
.top_title{color:white; background:#ddd; padding:5px 10px;}
.active{color:red;}
</style>


<div id="app">
	<h1 :class="a_class" @click='changeColor'>{{ name }}</h1>	
	<a v-on="{mouseenter:onEnter, mouseleave:onOut}" v-bind:class="{active:isActive}" v-bind:href="url">link</a>
	<br>
	<button v-on:click="changeColor">改变颜色 click me</button>
	
	
	<hr>
	<form @keyUp="onKeyUp" v-on:submit.prevent="onSubmit">
		用户名 <input id="focus" v-on:keyUp.enter="onPressEnter" type="text" name="username"> <br>
		密码 <input type="password" name="pass"> <br>
		<input type="submit" value="提交">
	</form>
</div>
<hr>


<script>
var app=new Vue({
	el:'#app',
	data:{
		name:'v-on',
		url:"https://baidu.com",
		a_class:'top_title',
		isActive:true,
	},
	methods:{
		changeColor:function(){
			this.isActive=!this.isActive
		},
		
		onEnter:function(){
			console.log("enter")
		},
		onOut:function(){
			console.log("out")
		},
		onSubmit:function(e){
			//e.preventDefault();
			console.log('submit e=',e)
			return false;
		},
		onKeyUp:function(e){
			console.log('keyup presssed=', e.key, e);
		},
		onPressEnter:function(e){ //只响应键盘的 enter 键
			console.log(">>enter pressed: e=",e.key, e)
		},
		
		onLoad:function(e){
			console.log("load now", e)
		}
	}
})

window.onload=function(){
	document.getElementById("focus").focus()
}
</script>






========================================
v-model 模型及其修饰符: input/radio/checkbox/select/textarea/
----------------------------------------
<meta charset="UTF-8"> 

<!-- 开发环境版本，包含了有帮助的命令行警告 
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
-->
<script src="/static/js/vue.js"></script>
<style>
label{line-height:30px; display:block;}
pre b{color:red;}
</style>
v-model 模型：添加新员工
<hr>

<div id="app">
	<label>Name: 
		<input type="input" v-model.number="name">
	</label>

	<label>Sex: 
		<input type="radio" v-model="sex" value="F">Female
		<input type="radio" v-model="sex" value="M">Male
	</label>

	<label>habit: 
		<input type="checkbox" v-model="habit" value="化妆">化妆
		<input type="checkbox" v-model="habit" value="跳舞">跳舞
		<input type="checkbox" v-model="habit" value="唱歌">唱歌
		<input type="checkbox" v-model="habit" value="画画">画画
	</label>

	<label>Story: 
		<select v-model="story">
			<option value="1">1层: 奢侈品</option>
			<option value="2">2层：超市</option>
			<option value="3">3层：服装</option>
			<option value="4">4层：电器</option>
			<option value="5">5层：教育</option>
			<option value="6">6层：餐饮</option>
		</select>
	</label>

	<label>Ideal Job: <br>
		<select v-model="job" multiple>
			<option value="0">经理</option>
			<option value="1">销售</option>
			<option value="2">收银</option>
			<option value="3">程序员</option>
		</select>
	</label>

	<label>Other note: <br>
		<textarea v-model="text"></textarea>
	</label>
	
	<label>提交： 
		<input type='submit' value='都没有name，则么提交呢？ajax'>
	</label>
	
	<hr>核对区域:
	<pre>info: name:<b>{{name}}</b>; Sex:<b>{{sex}}</b>; Story:<b>{{story}}</b>; habit:<b>{{habit}}</b>; text:<b>{{text}}</b>; job:<b>{{job}}</b></pre>
</div>

<hr>
F12 控制台，输入 app.sex="F"<br>
app.story=2

<script>
var app=new Vue({
	el:"#app",
	data:{
		name:"Lily",
		sex:"M",
		habit:["唱歌","化妆"],
		story:3,
		job:[],
		text:"this is a very long text; this is a very long text; ",
	}
});
</script>



========================================
vue 控制流指令:v-if/ v-if-else/ v-esle/
----------------------------------------
1.v-else
<div id="app">
	<div v-if="role=='admin'">
		管理员你好
	</div>
	<div v-else>
		您没有权限访问此页面
	</div>
</div>

app=new Vue({
	el:'#app',
	data:{
		name:'vue.js',
		role:'hr'
	}
});




2.完整实例，if还可以跟逻辑判断

<meta charset="UTF-8"> 

<!-- 开发环境版本，包含了有帮助的命令行警告 
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
-->
<script src="/static/js/vue.js"></script>
vue 控制流
<hr>

<div id="app">
	<div v-if="role=='admin' || role=='super_admin'">
		管理员你好
	</div>
	<div v-else-if="role=='hr'">
		hr 页面: 查看简历列表
	</div>
	<div v-else>
		您没有权限访问此页面
	</div>
</div>

<hr>
F12 控制台，输入 app.role='super_admin'

<script>
app=new Vue({
	el:'#app',
	data:{
		name:'vue.js',
		role:'hr'
	}
});
</script>





========================================
计算属性: computed 带缓存
----------------------------------------
<meta charset="UTF-8"> 

<!-- 开发环境版本，包含了有帮助的命令行警告 
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
-->
<script src="/static/js/vue.js"></script>
vue 计算属性：
<hr>
尝试修改分数:<br>
在v-model中要使用.number后缀修饰符，否则默认是字符串，总分会不正常。<br>
或者使用 parseFloat(str) 在js中转换。

<div id="app">
	<table border='1' cellspacing="0">
		<tr><th>科目</th> <th>分数</th> </tr>
		<tr><td>数学</td> <td><input type="text" v-model.number="math"></td> </tr>
		<tr><td>物理</td> <td><input type="text" v-model.number="physics"></td> </tr>
		<tr><td>英语</td> <td><input type="text" v-model.number="english"></td> </tr>
		<tr><td>语文</td> <td><input type="text" v-model.number="chinese"></td> </tr>
		<tr><td>总分</td> <td>{{sum}}</td> </tr>
		<tr><td>平均分</td> <td>{{ mean }}</td> </tr>
	</table>
	
</div>

<hr>
F12 控制台，输入 app.chinese=80

<script>
app=new Vue({
	el:'#app',
	data:{
		math:100,
		physics:90,
		english:95,
		chinese:30,
	},
	computed:{
		sum:function(){
			return parseFloat(this.math)+this.physics+this.english+this.chinese;
		},
		mean: function(){
			return Math.round(this.sum/4);
		}
	}
});
</script>



========================================
方法 methods: 不缓存
----------------------------------------
<p>Reversed message: "{{ reversedMessage() }}"</p>

// 在组件中
methods: {
  reversedMessage: function () {
    return this.message.split('').reverse().join('')
  }
}

计算属性是基于它们的响应式依赖进行缓存的。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 message 还没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。

这也同样意味着下面的计算属性将不再更新，因为 Date.now() 不是响应式依赖：

computed: {
  now: function () {
    return Date.now()
  }
}

相比之下，每当触发重新渲染时，调用方法将总会再次执行函数。



========================================
vue 全局及局部组件 Vue.component('newTagName',{})
----------------------------------------
<meta charset="UTF-8"> 

<!-- 开发环境版本，包含了有帮助的命令行警告 
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
-->
<script src="/static/js/vue.js"></script>
vue 全局及局部组件：
<hr>
<style>
div{border:1px dashed #eee; margin:5px; padding:10px;}
</style>

<div id="seg1">
	<alert></alert>
	<alert></alert>
</div>

<div id="seg2">
	<alert></alert>
	<alert2></alert2>
</div>

<div id="seg3">
	<alert></alert>
	<alert2>没有显示2</alert2>
	<alert3></alert3>
</div>

<div id="app">
	{{math}}
</div>

<hr>
F12 控制台，输入 app.chinese=80

<script>
Vue.component('alert',{
	template:'<button @click="on_click">弹出窗提醒！</button>',
	methods:{
		on_click:function(){
			alert('弹出的js窗口。'+this.math)
		}
	}
})
//组件必须放到实例内部，才能渲染
new Vue({el:'#seg1'})

//私有的组件
new Vue({
	el:'#seg2',
	components:{
		'alert2':{
			template:'<button @click="on_click2">弹2</button>',
			methods:{
				on_click2:function(){
					alert('on click2');
				}
			}
		}
	}
})

//私有的组件，封装版
var alert3_component={
	template:'<button @click="on_click2">弹3</button>',
	methods:{
		on_click2:function(){
			alert('on click3');
		}
	}
}
new Vue({
	el:'#seg3',
	components:{
		'alert3':alert3_component,
	}
})

//还没有说组件之间的通信
app=new Vue({
	el:'#app',
	data:{
		math:100,
	},
});
</script>



========================================
|-- 组件-配置组件，组件内变量
----------------------------------------
<meta charset="UTF-8"> 
<!-- 开发环境版本，包含了有帮助的命令行警告 
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
-->
<script src="/static/js/vue.js"></script>
vue 组件的配置，点赞实例：
<hr>
<style>
div{border:1px dashed #eee; margin:5px; padding:10px;}

.likedStyle{background:deeppink;}
</style>


<div id="app">
点赞1:
	<like></like>
	{{maxValue}}
</div>

<div id="app2">
点赞2:
	<like2></like2>
</div>

<hr>
F12 控制台，输入 app.maxValue=80


<template id="like_component_tpl">
	<button :class="{likedStyle: liked}" @click="toggle_like">点赞2| {{like_count}}</button>
</template>
<script>
Vue.component('like',{
	template:'<button :class="{likedStyle: liked}" @click="toggle_like">点赞 {{like_count}}</button>',
	data:function(){//这里和Vue对象中的data不一样，前者返回obj，组件里返回fn
		return {
			like_count:10,
			liked:false,
			
		}
	},
	methods:{
		on_click:function(){
			alert('弹出的js窗口。'+this.like_count)
		},
		toggle_like:function(){
			if(!this.liked){
				this.like_count++ //规定一个用户只能赞一次
			}else{
				this.like_count--
			}
			this.liked=!this.liked
		}
	}
})
//设置组件变量
app=new Vue({
	el:'#app',
	data:{
		maxValue:100,
	},
});



//组件模板也可以写到html中，再在组件定义中引入id即可
Vue.component('like2',{
	template:'#like_component_tpl',
	data:function(){//这里和Vue对象中的data不一样，前者返回obj，组件里返回fn
		return {
			like_count:20,
			liked:false,
			
		}
	},
	methods:{
		on_click:function(){
			alert('弹出的js窗口。'+this.like_count)
		},
		toggle_like:function(){
			if(!this.liked){
				this.like_count++ //规定一个用户只能赞一次
			}else{
				this.like_count--
			}
			this.liked=!this.liked
		}
	}
})
app2=new Vue({
	el:'#app2',
});
</script>



========================================
|-- 组件的通信——父子通信
----------------------------------------
1.模板变量，在方法中读取
<meta charset="UTF-8"> 
<!-- 开发环境版本，包含了有帮助的命令行警告 
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
-->
<script src="/static/js/vue.js"></script>
vue 组件通信 - 父子组件的通信
<hr>
<style>

</style>


<div id="app">
	<alert msg="Hmmm"></alert>
	{{maxValue}}
</div>


<hr>
F12 控制台，输入 app.maxValue=80


<script>
Vue.component('alert',{
	template:'<button @click="on_click()">弹弹弹</button>',
	props:['msg'], //1.组件中；2.props数组中；
	methods:{
		on_click:function(){
			//alert('Yo.')
			alert(this.msg) //3.方法中可用该属性
		}
	}
})
//设置组件变量
app=new Vue({
	el:'#app',
	data:{
		maxValue:100,
		msg:'Yooooo.' //本例中组件读取不到这里
	},
});
</script>








2.



========================================
webpack
----------------------------------------
(angular)前端内容的自动化构建 https://www.imooc.com/learn/922
(node)webpack深入与实战 https://www.imooc.com/learn/802




========================================
vue实例
----------------------------------------
(ES6)使用vue2.0实现购物车和地址选配功能 https://www.imooc.com/learn/796





========================================
Vue.js火速上手
----------------------------------------
https://study.163.com/course/introduction.htm?courseId=1004181065#/courseDetail?tab=1
为什么用Vue？很简单，顺心。 在目前的三大前端框架中（Vue，Angular，React）Vue怕是最好上手的框架了，然而其核心功能和其他两者也竟然不相伯仲，那有什么理由不先学它呢？看不到。 人生如此苦短，Vue会使我们的开发过程变得更像是一种享受。对于中小型项目及个人和小型团队简直是不二之选。

1.简介

前端解析html好还是后端解析html好？
前端好，节省服务器压力。


2. 开始学




















========================================
Vue深入浅出(从入门到开发) 用到 Vue cli
----------------------------------------
https://study.163.com/course/introduction.htm?courseId=1004461012#/courseDetail?tab=1
https://study.163.com/course/introduction.htm?courseId=1004711010#/courseDetail?tab=1
简　　介	整个系列课程带领大家可以快速掌握Vue开发的流程,课程从简单到实战,适用于0基础学习.

Vue-CLI脚手架搭建
Vue-指令
Vue-条件及循环语句
Vue-事件及双向绑定
Vue-模板引擎
Vue-组件
Vue-属性传值
Vue-路由
Vue-资源请求





========================================
撩课-零基础玩转Vue2.x-基础篇
----------------------------------------
https://study.163.com/course/introduction.htm?courseId=1005974007#/courseDetail?tab=1
课程大纲：
1.ES6语法基础，包括let/const、解构赋值、set/map、Symbol、Iterator、Class、继承、综合案例；
2.Vue 2.x语法基础，包括指令、计算属性、set/get、全局组件、父子组件、data、组件间通信、动态绑定、自定义事件、插槽等；
3.Vue 2.x进阶篇，包括Vue-router、命名路由、嵌套路由、京东商城（购物车）实战；


========================================
----------------------------------------



========================================
----------------------------------------



